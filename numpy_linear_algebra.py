import streamlit as st
import numpy as np

def numpy_linear_algebra():
    st.title("Линейная алгебра в NumPy")
    
    st.header("Dot Product (dot)")
    st.markdown("Пример использования dot product:")
    a = np.array([1, 2, 3])
    b = np.array([4, 5, 6])
    code = """
    a = np.array([1, 2, 3])
    b = np.array([4, 5, 6])
    dot_product = np.dot(a, b)
    """
    st.code(code, language="python")
    dot_product = np.dot(a, b)
    st.info(f"Output:  \n{dot_product}")
    st.write("---")

    st.header("Matrix Multiplication (matmul)")
    st.markdown("Пример использования matrix multiplication:")
    matrix1 = np.array([[1, 2], [3, 4]])
    matrix2 = np.array([[5, 6], [7, 8]])
    matrix_product = np.matmul(matrix1, matrix2)
    st.write("matrix product:")
    st.write(matrix_product)
    st.write("---")

    st.header("Outer Product (outer)")
    st.markdown("Пример использования outer product:")
    outer_product = np.outer(a, b)
    st.write("outer product:")
    st.write(outer_product)
    st.write("---")

    st.header("Vectorized Dot Product (vdot)")
    st.markdown("Пример использования vectorized dot product:")
    vdot_product = np.vdot(a, b)
    st.write(f"vectorized dot product: {vdot_product}")
    st.write("---")

    st.header("Einstein Summation (einsum)")
    st.markdown("Пример использования einstein summation:")
    x = np.arange(6).reshape(2, 3)
    y = np.arange(3)
    einsum_result = np.einsum('ij,j->i', x, y)
    st.write("einsum result:")
    st.write(einsum_result)
    st.write("---")

    st.header("Singular Value Decomposition (SVD)")
    st.markdown("Пример использования Singular Value Decomposition (SVD):")
    X = np.random.randn(3, 3)
    U, S, VT = np.linalg.svd(X)
    st.write("U:")
    st.write(U)
    st.write("S:")
    st.write(S)
    st.write("VT:")
    st.write(VT)
    st.write("---")

    st.header("Eigenvalues and Eigenvectors")
    st.markdown("Пример использования eigenvalues и eigenvectors:")
    A = np.array([[1, -2], [2, -3]])
    eigenvalues, eigenvectors = np.linalg.eig(A)
    st.write("Eigenvalues:")
    st.write(eigenvalues)
    st.write("Eigenvectors:")
    st.write(eigenvectors)
    st.write("---")

    st.header("QR Decomposition")
    st.markdown("Пример использования QR decomposition:")
    Q, R = np.linalg.qr(matrix1)
    st.write("Q:")
    st.write(Q)
    st.write("R:")
    st.write(R)
    st.write("---")

    st.header("Matrix Inversion")
    st.markdown("Пример использования matrix inversion:")
    inverse_matrix = np.linalg.inv(matrix1)
    st.write("Inverse matrix:")
    st.write(inverse_matrix)
    st.write("---")

    st.header("Determinant")
    st.markdown("Пример использования determinant:")
    determinant = np.linalg.det(matrix1)
    st.write("Determinant:")
    st.write(determinant)
    st.write("---")

    st.header("Matrix Rank")
    st.markdown("Пример использования matrix rank:")
    rank = np.linalg.matrix_rank(matrix1)
    st.write("Rank:")
    st.write(rank)
    st.write("---")

    st.header("Matrix Power")
    st.markdown("Пример использования matrix power:")
    power = 3
    powered_matrix = np.linalg.matrix_power(matrix1, power)
    st.write(f"Matrix raised to the power of {power}:")
    st.write(powered_matrix)
    st.write("---")

    st.header("Trace")
    st.markdown("Пример использования trace:")
    trace = np.trace(matrix1)
    st.write("Trace:")
    st.write(trace)
    st.write("---")

if __name__ == "__main__":
    numpy_linear_algebra()
